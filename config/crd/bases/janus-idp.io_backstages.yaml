---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: backstages.janus-idp.io
spec:
  group: janus-idp.io
  names:
    kind: Backstage
    listKind: BackstageList
    plural: backstages
    singular: backstage
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Backstage is the Schema for the backstages API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackstageSpec defines the desired state of Backstage
            properties:
              backstage:
                description: Configuration for Backstage. Optional.
                properties:
                  appConfig:
                    description: References to existing app-configs Config objects,
                      that will be mounted as files in the specified mount path. Each
                      element can be a reference to any ConfigMap or Secret, and will
                      be mounted inside the main application container under a dedicated
                      directory containing the ConfigMap or Secret name (relative
                      to the specified mount path). Additionally, each file will be
                      passed as a `--config /path/to/secret_or_configmap/key` to the
                      main container args in the order of the entries defined in the
                      AppConfigs list. But bear in mind that for a single AppConfig
                      element containing several files, the order in which those files
                      will be appended to the container args, the main container args
                      cannot be guaranteed. So if you want to pass multiple app-config
                      files, it is recommended to pass one ConfigMap/Secret per app-config
                      file.
                    properties:
                      configMapRefs:
                        description: Names of ConfigMaps storing the app-config files.
                          Will be mounted as files under the MountPath specified.
                          Bear in mind not to put sensitive data in those ConfigMaps.
                          Instead, your app-config content can reference environment
                          variables (which you can set with the Env or EnvFrom fields)
                          and/or include extra files (see the ExtraConfig field).
                          More details on https://backstage.io/docs/conf/writing/.
                        items:
                          type: string
                        type: array
                      mountPath:
                        default: /opt/app-root/src
                        description: Mount path for all app-config files listed in
                          the ConfigMapRefs field
                        type: string
                    type: object
                  backendAuthSecretKeyRef:
                    description: Optional Reference to a Secret to use for Backend
                      Auth. A new one will be generated if not set. This Secret is
                      used to set an environment variable named 'APP_CONFIG_backend_auth_keys'
                      in the main container, which takes precedence over any 'backend.auth.keys'
                      field defined in default or custom application configuration
                      files. This is required for service-to-service auth and is shared
                      by all backend plugins.
                    properties:
                      key:
                        default: backend-secret
                        description: 'Key in the secret to use for the backend auth.
                          Default value is: backend-secret'
                        type: string
                      name:
                        description: Name of the secret to use for the backend auth
                        type: string
                    required:
                    - name
                    type: object
                  dynamicPluginsConfigMapRef:
                    description: 'Reference to an existing ConfigMap for Dynamic Plugins.
                      A new one will be generated with the default config if not set.
                      The ConfigMap object must have an existing key named: ''dynamic-plugins.yaml''.'
                    type: string
                  env:
                    description: Environment variables to inject into the application
                      containers. Bear in mind not to put sensitive data here. Use
                      EnvFrom instead.
                    items:
                      description: EnvVar represents an environment variable present
                        in a Container.
                      properties:
                        name:
                          description: Name of the environment variable. Must be a
                            C_IDENTIFIER.
                          type: string
                        value:
                          description: 'Variable references $(VAR_NAME) are expanded
                            using the previously defined environment variables in
                            the container and any service environment variables. If
                            a variable cannot be resolved, the reference in the input
                            string will be unchanged. Double $$ are reduced to a single
                            $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                            Escaped references will never be expanded, regardless
                            of whether the variable exists or not. Defaults to "".'
                          type: string
                        valueFrom:
                          description: Source for the environment variable's value.
                            Cannot be used if value is not empty.
                          properties:
                            configMapKeyRef:
                              description: Selects a key of a ConfigMap.
                              properties:
                                key:
                                  description: The key to select.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or its
                                    key must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                            fieldRef:
                              description: 'Selects a field of the pod: supports metadata.name,
                                metadata.namespace, `metadata.labels[''<KEY>'']`,
                                `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                spec.serviceAccountName, status.hostIP, status.podIP,
                                status.podIPs.'
                              properties:
                                apiVersion:
                                  description: Version of the schema the FieldPath
                                    is written in terms of, defaults to "v1".
                                  type: string
                                fieldPath:
                                  description: Path of the field to select in the
                                    specified API version.
                                  type: string
                              required:
                              - fieldPath
                              type: object
                              x-kubernetes-map-type: atomic
                            resourceFieldRef:
                              description: 'Selects a resource of the container: only
                                resources limits and requests (limits.cpu, limits.memory,
                                limits.ephemeral-storage, requests.cpu, requests.memory
                                and requests.ephemeral-storage) are currently supported.'
                              properties:
                                containerName:
                                  description: 'Container name: required for volumes,
                                    optional for env vars'
                                  type: string
                                divisor:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Specifies the output format of the
                                    exposed resources, defaults to "1"
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                resource:
                                  description: 'Required: resource to select'
                                  type: string
                              required:
                              - resource
                              type: object
                              x-kubernetes-map-type: atomic
                            secretKeyRef:
                              description: Selects a key of a secret in the pod's
                                namespace
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                  envFrom:
                    description: Environment variables to inject into the application
                      containers, as references to existing ConfigMap or Secret objects.
                    items:
                      description: EnvFromSource represents the source of a set of
                        ConfigMaps
                      properties:
                        configMapRef:
                          description: The ConfigMap to select from
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap must be defined
                              type: boolean
                          type: object
                          x-kubernetes-map-type: atomic
                        prefix:
                          description: An optional identifier to prepend to each key
                            in the ConfigMap. Must be a C_IDENTIFIER.
                          type: string
                        secretRef:
                          description: The Secret to select from
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret must be defined
                              type: boolean
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                    type: array
                  extraConfig:
                    description: References to existing Config objects to use as extra
                      config files. They will be mounted as files in the specified
                      mount path. Each element can be a reference to any ConfigMap
                      or Secret.
                    properties:
                      items:
                        description: List of references to extra config Config objects.
                        items:
                          properties:
                            configMapRef:
                              description: ConfigMap containing one or more extra
                                config files
                              properties:
                                name:
                                  description: Name of the object referenced.
                                  type: string
                              required:
                              - name
                              type: object
                            secretRef:
                              description: Secret containing one or more extra config
                                files
                              properties:
                                name:
                                  description: Name of the object referenced.
                                  type: string
                              required:
                              - name
                              type: object
                          type: object
                        type: array
                      mountPath:
                        default: /opt/app-root/src
                        description: Mount path for all extra configuration files
                          listed in the Items field
                        type: string
                    type: object
                  image:
                    description: Image to use in all containers (including Init Containers)
                    type: string
                  imagePullSecret:
                    description: Image Pull Secret to use in all containers (including
                      Init Containers)
                    type: string
                  replicas:
                    default: 1
                    description: Number of desired replicas to set in the Backstage
                      Deployment. Defaults to 1.
                    format: int32
                    type: integer
                type: object
              rawRuntimeConfig:
                description: Raw Runtime Objects configuration. For Advanced scenarios.
                properties:
                  backstageConfig:
                    description: Name of ConfigMap containing Backstage runtime objects
                      configuration
                    type: string
                  localDbConfig:
                    description: Name of ConfigMap containing LocalDb (P|ostgreSQL)
                      runtime objects configuration
                    type: string
                type: object
              skipLocalDb:
                default: false
                description: Control the creation of a local PostgreSQL DB. Set to
                  true if using for example an external Database for Backstage. To
                  use an external Database, you can provide your own app-config file
                  (see the AppConfig field in the Application structure) containing
                  references to the Database connection information, which might be
                  supplied as environment variables (see the Env field) or extra-configuration
                  files (see the ExtraConfig field in the Application structure).
                type: boolean
            type: object
          status:
            description: BackstageStatus defines the observed state of Backstage
            properties:
              conditions:
                description: Conditions is the list of conditions describing the state
                  of the runtime
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
